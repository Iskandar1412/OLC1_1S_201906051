/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/Application.java to edit this template
 */
package com.mycompany.proyecto1;


import java.io.BufferedReader;
import java.io.DataOutput;
import java.nio.charset.StandardCharsets;
import java.rmi.Naming;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;
import java.io.BufferedReader;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.json.JSONArray;
import org.json.JSONObject;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParser;
import analizadores.Lexico;
import analizadores.Sintactico;
import Project.Automata.*;
import Project.Error.*;
import Project.Reportes.*;
import java.awt.Desktop;
import java.io.FileFilter;
import java.util.Collections;
import java.util.LinkedList;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.ImageIcon;
import java.awt.Image;
import java.awt.Toolkit;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Objects;
/**
 *
 * @author Pacos
 */
public class Grafica extends javax.swing.JFrame {
    public static String EPSILON = "Îµ";
    public static char EPSILON_CHAR = EPSILON.charAt(0);
    boolean analizado = false;
    boolean generado = false;
    boolean tiene_archivos = false;
    boolean AutomataCreado = false;
    Lexico lexico;
    Sintactico sintactico;
    JFileChooser fc = new JFileChooser();
    FileNameExtensionFilter filter = new FileNameExtensionFilter("*.olc", "olc");
    //int contador = 0;
    //String [] content = new String[contador];
    //JComboBox ER_Men = new javax.swing.JComboBox<>();
    List<String> ER_Main_List = new ArrayList<>();
    /**
     * Creates new form Grafica
     */
    public Grafica() {
        initComponents();
        actualizar();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        ListaArch = new javax.swing.JTree();
        jScrollPane3 = new javax.swing.JScrollPane();
        Consola = new javax.swing.JTextArea();
        ER_Menu = new javax.swing.JComboBox<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        Imagen = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Texto_Ing = new javax.swing.JTextArea();
        ruta = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        OkButton = new javax.swing.JButton();
        TypeMenu = new javax.swing.JComboBox<>();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newMenuItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        generateMenu = new javax.swing.JMenu();
        analizeMenuItem = new javax.swing.JMenuItem();
        genreMenuItem = new javax.swing.JMenuItem();
        deleteArchivesMenuItem = new javax.swing.JMenuItem();
        openDirectoryMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jScrollPane2.setViewportView(ListaArch);

        Consola.setEditable(false);
        Consola.setColumns(20);
        Consola.setRows(5);
        jScrollPane3.setViewportView(Consola);

        ER_Menu.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                ER_MenuComponentAdded(evt);
            }
        });
        ER_Menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ER_MenuActionPerformed(evt);
            }
        });

        jScrollPane4.setViewportView(Imagen);

        jLabel1.setFont(new java.awt.Font("Script MT Bold", 2, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Texto A Escribir (Opcional)");

        Texto_Ing.setColumns(20);
        Texto_Ing.setFont(new java.awt.Font("Dialog", 3, 14)); // NOI18N
        Texto_Ing.setRows(5);
        jScrollPane1.setViewportView(Texto_Ing);

        ruta.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel2.setFont(new java.awt.Font("Script MT Bold", 2, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("------------------------------------- Salida -------------------------------------");

        jLabel3.setFont(new java.awt.Font("Script MT Bold", 2, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Typo");

        jLabel4.setFont(new java.awt.Font("Script MT Bold", 2, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("ER");

        OkButton.setText("Ok");
        OkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OkButtonActionPerformed(evt);
            }
        });

        TypeMenu.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Arbol", "Siguientes", "Transiciones", "AFD", "AFND" }));
        TypeMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TypeMenuActionPerformed(evt);
            }
        });

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        newMenuItem.setText("Nuevo");
        newMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newMenuItem);

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        generateMenu.setMnemonic('e');
        generateMenu.setText("Generate & Analize");

        analizeMenuItem.setMnemonic('y');
        analizeMenuItem.setText("Analizar");
        analizeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analizeMenuItemActionPerformed(evt);
            }
        });
        generateMenu.add(analizeMenuItem);

        genreMenuItem.setMnemonic('t');
        genreMenuItem.setText("Generar");
        genreMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genreMenuItemActionPerformed(evt);
            }
        });
        generateMenu.add(genreMenuItem);

        deleteArchivesMenuItem.setText("Borrar archivos Directorios");
        deleteArchivesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteArchivesMenuItemActionPerformed(evt);
            }
        });
        generateMenu.add(deleteArchivesMenuItem);

        openDirectoryMenuItem.setText("Abrir Directorio Archivos Prueba");
        openDirectoryMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openDirectoryMenuItemActionPerformed(evt);
            }
        });
        generateMenu.add(openDirectoryMenuItem);

        menuBar.add(generateMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 767, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(ER_Menu, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TypeMenu, 0, 274, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(OkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane4)
                    .addComponent(ruta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ER_Menu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(OkButton)
                    .addComponent(TypeMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                            .addComponent(jScrollPane1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ruta, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void ER_MenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ER_MenuActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_ER_MenuActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        // TODO add your handling code here:
        this.fc.setFileFilter(filter);
        this.fc.setCurrentDirectory(new File("src\\Archivos\\"));
        this.fc.addChoosableFileFilter(this.filter);
        if(this.fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
            try{
                Texto_Ing.setText("");
                List<String> ErTemp = new ArrayList<>();
                String text = readUnicodeClassic(fc.getSelectedFile().toString());
                Texto_Ing.setText(text);
                ruta.setText(fc.getSelectedFile().toString());
                this.analizado = false;
                this.generado = false;
                this.AutomataCreado = false;
            }catch(Exception e){}
        }
        
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void TypeMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TypeMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TypeMenuActionPerformed

    private void ER_MenuComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_ER_MenuComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_ER_MenuComponentAdded

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        boolean tiene_archivos = false;
        
        String path = "src\\Reportes";
        //String per = "hola.png";
        //String[]fs = per.split("[\".\"]");
        //System.out.println(fs[0]);
        //String[] as = path.split("\\\\");
        //System.out.println(as[0]);
        String pathAFD = path + "\\AFD_201906051\\";
        File carpeta = new File(pathAFD);
        File[] lista = carpeta.listFiles();
        int cuenta = 0;
        //System.out.println(lista.length);
        String [] its;
        List<String> ist = new ArrayList<>();
        for(int i = 0; i < lista.length; i++){
            if(lista[i].getName().endsWith(".png")) {
                String [] temp = lista[i].getName().split("[\".\"]");
                //System.out.println(lista[i].getName().split(".png"));
                ist.add(temp[0]);
                this.tiene_archivos = true;
                cuenta++;
            }
        }
        for(String sd : ist){ /*System.out.println(sd);*/ this.ER_Main_List.add(sd); }
        this.ER_Menu.setModel(new DefaultComboBoxModel(this.ER_Main_List.toArray()));
        if(this.tiene_archivos){
            this.AutomataCreado = true;
        }
        //System.out.println("Archivos: " + cuenta);
        /*
        List<String> asdf = new ArrayList<>();
        
        asdf.add("asdf");
        asdf.add("esf");
        asdf.add("fd");
        asdf.add("dfjkljkl");
        asdf.add("fds");
        String prue = "fdll";
        
        int valor = 0;
        for(String fd:asdf){ valor++; }
        String data[] = new String[valor];
        int val = 0;
        for(String fd: asdf){ data[val] = fd; val++; }
        
        DefaultComboBoxModel mod = new DefaultComboBoxModel(data);
        this.ER_Menu.setModel(mod);
        boolean repetido = false;
        int sd = 0;
        while(sd < data.length){
            System.out.println(asdf.get(sd));
            if(asdf.get(sd).equals(prue)){ repetido = true; System.out.println("Repetido"); break; }
            repetido = false;
            sd++;
        }
        System.out.println(repetido);
        if(repetido == false){
            System.out.println("wuuu");
            asdf.add(prue);
            this.ER_Menu.removeAllItems();
            int valors = 0;
            for(String td:asdf){ valors++; }
            System.out.println(valors);
            String e[] = new String[valors];
            int sval = 0;
            for(String td: asdf){ e[sval] = td; sval++; }
            DefaultComboBoxModel mode = new DefaultComboBoxModel(e);
            this.ER_Menu.setModel(mode);
        }
        */
    }//GEN-LAST:event_formWindowOpened

    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        // TODO add your handling code here:
        this.fc.setFileFilter(filter);
        this.fc.setCurrentDirectory(new File("src\\Archivos\\"));
        this.fc.addChoosableFileFilter(this.filter);
        if(fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION){
            try {
                Consola.setText("");
                List<String> ErTemp = new ArrayList<>();
                System.out.println("Archivo: " + fc.getSelectedFile());
                File fichero = fc.getSelectedFile();
                try(FileWriter fw = new FileWriter(fichero)){
                    fw.write(this.Texto_Ing.getText());
                    Consola.setText("Archivo guardado: " + fc.getSelectedFile());
                    this.analizado = false;
                    this.AutomataCreado = false;
                    this.generado = false;
                    this.ruta.setText(fc.getSelectedFile().toString());
                }catch(Exception e) { }
            }catch(Exception e){ }
        }
    }//GEN-LAST:event_saveAsMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        // TODO add your handling code here:
        if(this.ruta.getText() == ""){
            System.out.println("Error: Debe guardar el archivo");
            this.Consola.setText("Error: Debe guardar el archivo");
        }else{
            this.Consola.setText(" ");
            try(FileWriter fw = new FileWriter(this.ruta.getText())){
                this.analizado = false;
                this.AutomataCreado = false;
                this.generado = false;
                fw.write(this.Texto_Ing.getText());
                this.Consola.setText("Guardado");
            }catch(Exception e) { }
        }
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void newMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenuItemActionPerformed
        // TODO add your handling code here:
        this.Consola.setText("");
        this.analizado = false;
        this.AutomataCreado = false;
        this.generado = false;
        this.ruta.setText("");
        this.Texto_Ing.setText("");
    }//GEN-LAST:event_newMenuItemActionPerformed
    
    @SuppressWarnings("deprecation")
    private void genreMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genreMenuItemActionPerformed
        // TODO add your handling code here:
        if(analizado){
            if(generado == false){
                System.out.println("Generando Automatas {");
                for(ER er : sintactico.Lista_ER){ System.out.println("\t::- " + er.name + " -::"); er.GenraraAFND(); }
                System.out.println("}");
                this.AutomataCreado = true;
                this.generado = true;
                this.Consola.setText("Automatas Creados Correctamente");
            }else{ this.Consola.setText("Automatas Existentes"); }
        }
        try{
            if(this.AutomataCreado){
                System.out.println("------> Validando Cadenas <------");
                if(sintactico.Lista_Cadena.size() > 0){
                    boolean encontrado = false;
                    for(Cadenas valu : sintactico.Lista_Cadena){
                        encontrado = false;
                        for(ER vela : sintactico.Lista_ER){
                            if(valu.name.equals(vela.name)){
                                System.out.println("Cadena: " + valu.string + ", En la Expresion Regular: " + vela.name);
                                valu.Encontrado = true;
                                vela.ValidarCadena(valu.string, sintactico.Lista_Conjunto, valu);
                                encontrado = true;
                                break;
                            }
                        }
                        if(encontrado == false){ System.out.println("Expresion Regular no Encontrada: [" + valu.name + "] para la cadena [" + valu.string + "]"); }
                    }
                    String texto = "";
                    JSONArray Main = new JSONArray();
                    JSONObject sec;
                    for(Cadenas i : sintactico.Lista_Cadena) {
                        sec = new JSONObject();
                        if(i.validacion){
                            texto += "La cadena: [" + i.string + "] es VALIDA para la Expresion Regular: [" + i.name + "]\n";
                            System.out.println("La cadena: [" + i.string + "] es VALIDA para la Expresion Regular: [" + i.name + "]");
                            //this.Consola.setText("La cadena: [" + i.string + "] es VALIDA para la Expresion Regular: [" + i.name + "]");
                            sec.put("Resultado", "Cadena Valida");
                            sec.put("Expresion_Regular", i.name);
                            sec.put("Valor", i.string);
                        }else if(i.Encontrado == false){
                            texto += "Cadena: [" + i.string + "], no encontrada para la Expresion Regular: [" + i.name +"]\n";
                            System.out.println("La cadena: [" + i.string + "] es INVALIDA para la Expresion Regular: [" + i.name +"]");
                            //this.Consola.setText("La cadena: [" + i.string + "] es INVALIDA para la Expresion Regular: [" + i.name +"]");
                            sec.put("Resultado", "Expresion Regular no Encontrada");
                            sec.put("Expresion_Regular", i.name);
                            sec.put("Valor", i.string);
                        }else{
                            texto += "La cadena: [" + i.string + "] es INVALIDA para la Expresion Regular: [" + i.name +"]\n";
                            System.out.println("La cadena: [" + i.string + "] es INVALIDA para la Expresion Regular: [" + i.name +"]");
                            //this.Consola.setText("La cadena: [" + i.string + "] es INVALIDA para la Expresion Regular: [" + i.name +"]");
                            sec.put("Resultado", "Cadena Invalida");
                            sec.put("Expresion_Regular", i.name);
                            sec.put("Valor", i.string);
                        }
                        Main.put(sec);
                    }
                    String exit_json = new GsonBuilder().setPrettyPrinting().create().toJson(new JsonParser().parse(Main.toString()));
                    Create_File("src\\Reportes\\SALIDAS_201906051\\Salida.JSON", exit_json);
                    System.out.println("------> Archivo de Salida Creado Correctamente <-------");
                    this.Consola.setText(texto);
                }else{ System.out.println("Error"); }
            }
        }catch(Exception e){ }
        this.actualizar();
    }//GEN-LAST:event_genreMenuItemActionPerformed
    
    private void Create_File(String path, String content){
        FileWriter fw = null;
        PrintWriter pw = null;
        try{
            fw = new FileWriter(path);
            pw = new PrintWriter(fw);
            pw.write(content);
            pw.close();
            fw.close();
        }catch(Exception e){ }
        finally{
            if(pw != null){ pw.close(); }
        }
    }
    
    @SuppressWarnings("deeprecation")
    private void analizeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analizeMenuItemActionPerformed
        // TODO add your handling code here:
        if(this.ruta.getText() != ""){
            try{
                Reportes reportes = new Reportes();
                Boolean Errores = false;
                lexico = new Lexico(new BufferedReader(new FileReader(this.ruta.getText())));
                sintactico = new Sintactico(lexico);
                sintactico.parse();
                try{
                    System.out.println("<>---<>---<> ERRORES <>---<>---<>");
                    if(lexico.errores.size() > 0 || sintactico.errores.size() > 0){
                        if(lexico.errores.size() > 0){
                            System.out.println("------> ERRORES LEXICOS <------");
                            this.Consola.setText("Error Lexico encontrado... agregando a la tabla de errores");
                            for(Error_LS ertab : lexico.errores){ System.out.println(ertab.show()); }
                        }
                        if(sintactico.errores.size() > 0){
                            System.out.println("------> ERRORES SINTACTICOS <------");
                            this.Consola.setText("Error Sintactico encontrado... agregando a la tabla de errores");
                            for(Error_LS ertab : sintactico.errores) { System.out.println(ertab.show()); }
                        }
                        
                        Errores = true;
                        this.analizado = false;
                        this.AutomataCreado = false;
                    }else{ Errores = false; }
                    //generar reportes
                    System.out.println("<>---<>---<>--- | ---<>---<>---<>");
                    reportes.GenerarReporte(lexico.errores, sintactico.errores);
                    if(Errores == true){ reportes.GenerarReporte(lexico.errores, sintactico.errores); }
                    if(Errores == false){
                        System.out.println("Expresiones Regulares: {");
                        for(ER er : sintactico.Lista_ER){ System.out.println("\t" + er.name); er.GestionArbol(); er.GenerarHermano(); }
                        System.out.println("}");
                        
                        System.out.println("------> Analidis completado <------");
                        this.analizado = true;
                        this.AgregarA_ER_Main(sintactico.Lista_ER);
                    }
                }catch(Exception e){ this.Consola.setText("Error con el Archivo de entrada: Agregando errores en tabla"); }
            }catch(Exception e){ }
        }else{ this.Consola.setText("Error: No se pudo abrir el archivo"); }
    }//GEN-LAST:event_analizeMenuItemActionPerformed

    private void OkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OkButtonActionPerformed
        // TODO add your handling code here:
        if(this.AutomataCreado){
            String er = "";
            String option = "";
            if(this.TypeMenu.getSelectedItem() != null && this.ER_Menu.getSelectedItem() != null){
                er = this.ER_Menu.getSelectedItem().toString();
                option = this.TypeMenu.getSelectedItem().toString();
                if(option.equals("Arbol")){
                    String path = "src\\Reportes\\ARBOLES_201906051\\A_" + er + ".png";
                    this.Imagen.setIcon(new ImageIcon(path));
                }else if(option.equals("Siguientes")){
                    String path = "src\\Reportes\\SIGUIENTES_201906051\\S_" + er + ".png";
                    this.Imagen.setIcon(new ImageIcon(path));
                }else if(option.equals("Transiciones")){
                    String path = "src\\Reportes\\TRANSICIONES_201906051\\T_" + er + ".png";
                    this.Imagen.setIcon(new ImageIcon(path));
                }else if(option.equals("AFD")){
                    String path = "src\\Reportes\\AFD_201906051\\" + er + ".png";
                    this.Imagen.setIcon(new ImageIcon(path));
                }else if(option.equals("AFND")){
                    String path = "src\\Reportes\\AFND_201906051\\" + er + ".png";
                    this.Imagen.setIcon(new ImageIcon(path));
                }else{ this.Consola.setText("Error: No esta seleccionada ninguna grafica"); }
            }
        }
    }//GEN-LAST:event_OkButtonActionPerformed

    private void deleteArchivesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteArchivesMenuItemActionPerformed
        // TODO add your handling code here:
        String direcA = "src\\Reportes\\ARBOLES_201906051\\";
        String direcS = "src\\Reportes\\SIGUIENTES_201906051\\";
        String direcT = "src\\Reportes\\TRANSICIONES_201906051\\";
        String direcAFD = "src\\Reportes\\AFD_201906051\\";
        String direcAFND = "src\\Reportes\\AFND_201906051\\";
        File path = new File(direcA);
        if(path.listFiles().length > 0){
            File a1 = new File(direcA);
            File a2 = new File(direcS);
            File a3 = new File(direcT);
            File a4 = new File(direcAFD);
            File a5 = new File(direcAFND);
            for(File fe : Objects.requireNonNull(a1.listFiles())){ if(!fe.isDirectory()) { fe.delete(); } }
            for(File fe : Objects.requireNonNull(a2.listFiles())){ if(!fe.isDirectory()) { fe.delete(); } }
            for(File fe : Objects.requireNonNull(a3.listFiles())){ if(!fe.isDirectory()) { fe.delete(); } }
            for(File fe : Objects.requireNonNull(a4.listFiles())){ if(!fe.isDirectory()) { fe.delete(); } }
            for(File fe : Objects.requireNonNull(a5.listFiles())){ if(!fe.isDirectory()) { fe.delete(); } }
            this.actualizar();
            
            //List<String> lista = new ArrayList<>();
            this.ER_Main_List.clear();
            this.ER_Menu.setModel(new DefaultComboBoxModel(this.ER_Main_List.toArray()));
        }
    }//GEN-LAST:event_deleteArchivesMenuItemActionPerformed

    private void openDirectoryMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openDirectoryMenuItemActionPerformed
        // TODO add your handling code here:
        String path = "src\\";
        String nombre = "Archivos";
        Path rute = Paths.get(path,nombre);
        if(Files.exists(rute)){
            try{ Desktop.getDesktop().open(rute.toFile()); }
            catch(Exception e){ }
        }
        
    }//GEN-LAST:event_openDirectoryMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Grafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Grafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Grafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Grafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Grafica().setVisible(true);
            }
        });
    }
    
    public String[] agregarMen(String [] content){
        String[] a = content;
        return a;
    }
    
    private void AgregarA_ER_Main(LinkedList<ER> er){
        if(this.ER_Main_List.isEmpty()){
            //List<String> temp = new ArrayList<>();
            for(ER ero : er){ /*System.out.println(ero.name);*/ this.ER_Main_List.add(ero.name); }
            this.ER_Menu.setModel(new DefaultComboBoxModel(this.ER_Main_List.toArray()));
        }else{
            //System.out.println("Segunda");
            int i = 0;
            int cantidad = this.ER_Main_List.size();
            List<String> temp = new ArrayList<>();
            for(ER ero : er){ temp.add(ero.name); }
            
            int cantidad_lista_temp = temp.size();
            boolean repe = false;
            String[] adr;
            while(i < cantidad){
                int j = 0;
                //System.out.println(this.ER_Main_List.get(i));
                while(j < cantidad_lista_temp){
                    //System.out.println(temp.get(j) + "++++");
                    if(this.ER_Main_List.get(i).equals(temp.get(j))){ repe = true; break; }
                    repe = false;
                    j++;
                }
                i++;
            }
            //System.out.println(repe + "SSS");
            if(repe == false){
                for(String st : temp){ this.ER_Main_List.add(st); }
                this.ER_Menu.setModel(new DefaultComboBoxModel(this.ER_Main_List.toArray()));
            }
        }
    }
    
    public String readUnicodeClassic(String fileName){
        File file = new File(fileName);
        try(FileInputStream fis = new FileInputStream(file);InputStreamReader isr = new InputStreamReader(fis, StandardCharsets.UTF_8); BufferedReader reader = new BufferedReader(isr)){
            String str;
            String cadea = "";
            while((str = reader.readLine()) != null) {
                cadea += str + "\n";
            }
            return cadea;
        }catch(Exception e){ }
        return "";
    }
    
    private void actualizar(){
        File fichero = new File("src/Reportes/");
        raiz = new DefaultMutableTreeNode(fichero.getName());
        modelo = new DefaultTreeModel(raiz);
        crear(fichero, raiz);
        this.ListaArch.setModel(modelo);
        arbol = new LinkedList<>();
        Collections.addAll(arbol, archivos("src/Reportes/ARBOLES_201906051/"));
        transicion = new LinkedList<>();
        Collections.addAll(transicion, archivos("src/Reportes/TRANSICIONES_201906051/"));
        siguiente = new LinkedList<>();
        Collections.addAll(siguiente, archivos("src/Reportes/SIGUIENTES_201906051/"));
        afd = new LinkedList<>();
        Collections.addAll(afd, archivos("src/Reportes/AFD_201906051/"));
        afn = new LinkedList<>();
        Collections.addAll(afn, archivos("src/Reportes/AFND_201906051/"));
    }
    
    private void crear(File dir, DefaultMutableTreeNode nodo){
        File[] archivos = dir.listFiles(new FileFilter() {
            @Override
            public boolean accept(File pathname){ return pathname.getName().toLowerCase().endsWith(".png")||pathname.getName().toLowerCase().endsWith(".svg")||pathname.getName().toLowerCase().endsWith(".html")||pathname.getName().toLowerCase().endsWith(".json")||pathname.isDirectory(); }
        });
        if(archivos != null){
            int c = 0;
            for(File f:archivos){
                DefaultMutableTreeNode hijo = new DefaultMutableTreeNode(f.getName());
                modelo.insertNodeInto(hijo, nodo, c);
                c++;
                if(f.isDirectory()){ crear(f,hijo); }
            }
        }
    }
    
    private File[] archivos(String ruta){
        File a = new File(ruta);
        File[] lista = a.listFiles(new FileFilter(){
            @Override
            public boolean accept(File pathname){ return pathname.getName().toLowerCase().endsWith(".png"); }
        });
        return lista;
    }
    
    
    private DefaultMutableTreeNode raiz;
    private DefaultTreeModel modelo;
    private File f;
    public static int ban = 0;
    public int pos = 0;
    public int tamano = 0;
    public LinkedList<File> arbol = new LinkedList<>();
    public LinkedList<File> transicion = new LinkedList<>();
    public LinkedList<File> siguiente = new LinkedList<>();
    public LinkedList<File> afd = new LinkedList<>();
    public LinkedList<File> afn = new LinkedList<>();
    public LinkedList<File> actual = new LinkedList<>();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea Consola;
    private javax.swing.JComboBox<String> ER_Menu;
    private javax.swing.JLabel Imagen;
    private javax.swing.JTree ListaArch;
    private javax.swing.JButton OkButton;
    private javax.swing.JTextArea Texto_Ing;
    private javax.swing.JComboBox<String> TypeMenu;
    private javax.swing.JMenuItem analizeMenuItem;
    private javax.swing.JMenuItem deleteArchivesMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu generateMenu;
    private javax.swing.JMenuItem genreMenuItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem newMenuItem;
    private javax.swing.JMenuItem openDirectoryMenuItem;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JLabel ruta;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables
    
}
