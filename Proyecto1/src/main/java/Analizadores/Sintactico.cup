
/*------------------------------1. Package e importaciones------------------------------*/
package Analizadores;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.util.LinkedList;
import Project.errors.Error;
import Project.errors.Conj;
import Project.Siguientes.Follow;
import Project.Siguientes.Siguiente;
import Project.automatas.AFD.Aceptacion;
import Project.automatas.AFD.Automata;
import Project.automatas.AFD.Estado;
import Project.automatas.AFD.State;
import Project.automatas.AFD.Transicion;
import Project.automatas.Thompson.AutomataT;
import Project.automatas.Thompson.Nodo;
import Project.tree.Nodo;
import Project.tree.Tree;

/*------------------------------2. Codigo para el parser, variables, metodos------------------------------*/
parser code
{:
	//objetos, variables, ... sintaxis java
	public ArrayList<Error> err = new ArrayList<>(); //errores del sistema
	public ArrayList<Conj> con = new ArrayList<>(); //conjuntos que se generen
	public ArrayList<Thompson> thompson = new ArrayList<>();
	public ArrayList<Tree> tree = new ArrayList<>();
	public ArrayList<Follow> follow = new ArrayList<>();
	public ArrayList<String> car = new ArrayList<>();
	public ArrayList<Estado> est = new ArrayList<>();
	public ArrayList<Estado> tab = new ArrayList<>();
	public ArrayList<State> trans = new ArrayList<>();
	public ArrayList<Automata> automata = new ArrayList<>();
	public ArrayList<Aceptacion> val = new ArrayList<>();
	public int contador = 1;
	public int cestado = 0;

	public void syntax_error(Symbol s) {
		errors.add(new SyntaxError(s.value.toString(), s.left, s.right));
		Error newErr = new Error("Sintactico", s.value.toString(), s.right+1, s.left+1);
		err.add(newErr);
	}
	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
		throw new Exception("Error irrecuperable en la linea: " + s.left + ", columna: " s.right);
		Error newErr = new Error("Sintactico", s.value.toString(), s.right+1, s.left+1);
		err.add(newErr);
	}
:}


/*------------------------------3. Terminales------------------------------*/

terminal String CONJ;
terminal String PTCOMA,PARIZQ,PARDER,LLAVIZQ,LLAVDER,CORIZQ,CORDER;
terminal String MAS,MENOS,POR,DIVIDIDO,UMENOS;
terminal String MAYOR,COMA,APROX,COMILLA;
terminal String AND,OR,STARNO,SG_ADMIRACION,YY;
terminal String IDENT;
terminal String STRING,ENTERO,DECIMAL;
terminal String PORCENTAJE,DOBPT;


/*------------------------------4. No terminales------------------------------*/
non terminal ini;
non terminal contenido;
non terminal declaracion;
non terminal validar;
non terminal conjunto;
non terminal expresion;
non terminal ArrayList<Object> otros, e;
non terminal String binario, unitario, not, grupo, val, sym;

/*non terminal Double expresion;*/

/*------------------------------5. Precedencias------------------------------*/



/*------------------------------6. Producciones------------------------------*/
start with ini;

ini::=LLAVIZQ contenido LLAVDER
	| error			{:
						Error newErr = new Error("Sintactico", s.value.toString(), s.right+1, s.left+1);
						err.add(newErr);
					:}
;

contenido::=declaracion PORCENTAJE PORCENTAJE validar
	| error 		{:
						Error newErr = new Error("Sintactico", s.value.toString(), s.right+1, s.left+1);
						err.add(newErr);
					:}
;

declaracion::=conjunto declaracion
	| expresion declaracion
	| conjunto
	| expresion
	| error 		{:
						Error newErr = new Error("Sintactico", s.value.toString(), s.right+1, s.left+1);
						err.add(newErr);
					:}
;

conjunto::=CONJ DOBPT IDENT:a MENOS MAYOR not:b PTCOMA 		{:
																ArrayList<String> num = new ArrayList<>();
																for(int i = 0; i < car.size(); i++) {
																	num.add(car.get(i));
																}
																Conj novo = new Conj(a, num, b);
																con.add(novo);
																car.clear();
															:}
	| error {:
				Error newErr = new Error("Sintactico", s.value.toString(), s.right+1, s.left+1);
			:}
;

